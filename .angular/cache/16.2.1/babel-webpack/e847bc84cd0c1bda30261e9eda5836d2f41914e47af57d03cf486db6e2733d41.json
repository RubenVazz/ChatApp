{"ast":null,"code":"import { BrowserModule } from '@angular/platform-browser';\nimport { RouteReuseStrategy } from '@angular/router';\nimport { IonicModule, IonicRouteStrategy } from '@ionic/angular';\nimport { AppComponent } from './app.component';\nimport { AppRoutingModule } from './app-routing.module';\nimport { getApp, initializeApp, provideFirebaseApp } from '@angular/fire/app';\nimport { environment } from '../environments/environment';\nimport { provideAuth, getAuth, initializeAuth, indexedDBLocalPersistence } from '@angular/fire/auth';\nimport { provideFirestore, getFirestore } from '@angular/fire/firestore';\nimport { Capacitor } from '@capacitor/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ionic/angular\";\nimport * as i2 from \"@angular/fire/app\";\nimport * as i3 from \"@angular/fire/auth\";\nimport * as i4 from \"@angular/fire/firestore\";\nlet AppModule = /*#__PURE__*/(() => {\n  var _class;\n  class AppModule {}\n  _class = AppModule;\n  _class.ɵfac = function AppModule_Factory(t) {\n    return new (t || _class)();\n  };\n  _class.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n    type: _class,\n    bootstrap: [AppComponent]\n  });\n  _class.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n    providers: [{\n      provide: RouteReuseStrategy,\n      useClass: IonicRouteStrategy\n    }],\n    imports: [BrowserModule, IonicModule.forRoot(), AppRoutingModule, provideFirebaseApp(() => initializeApp(environment.firebase)),\n    // provideAuth(() => getAuth()), \n    provideAuth(() => {\n      if (Capacitor.isNativePlatform()) {\n        return initializeAuth(getApp(), {\n          persistence: indexedDBLocalPersistence\n        });\n      } else {\n        return getAuth();\n      }\n    }), provideFirestore(() => getFirestore())]\n  });\n  return AppModule;\n})();\nexport { AppModule };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}