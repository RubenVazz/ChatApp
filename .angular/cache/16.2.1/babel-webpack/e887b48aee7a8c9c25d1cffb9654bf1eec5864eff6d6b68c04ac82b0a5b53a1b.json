{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/rubva/Desktop/chat+app+source+code/chat app source code/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { map, of, switchMap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./../auth/auth.service\";\nimport * as i2 from \"../api/api.service\";\nlet ChatService = /*#__PURE__*/(() => {\n  var _class;\n  class ChatService {\n    constructor(auth, api) {\n      this.auth = auth;\n      this.api = api;\n      // this.getId();\n    }\n\n    getId() {\n      console.log(this.currentUserId);\n      this.currentUserId = this.auth.getId();\n    }\n    getUsers() {\n      this.users = this.api.collectionDataQuery('users', this.api.whereQuery('uid', '!=', this.currentUserId));\n    }\n    createChatRoom(user_id) {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        try {\n          // check for existing chatroom\n          let room;\n          const querySnapshot = yield _this.api.getDocs('chatRooms', _this.api.whereQuery('members', 'in', [[user_id, _this.currentUserId], [_this.currentUserId, user_id]]));\n          room = yield querySnapshot.docs.map(doc => {\n            let item = doc.data();\n            item.id = doc.id;\n            return item;\n          });\n          console.log('exist docs: ', room);\n          if (room?.length > 0) return room[0];\n          const data = {\n            members: [_this.currentUserId, user_id],\n            type: 'private',\n            createdAt: new Date(),\n            updatedAt: new Date()\n          };\n          room = yield _this.api.addDocument('chatRooms', data);\n          return room;\n        } catch (e) {\n          throw e;\n        }\n      })();\n    }\n    getChatRooms() {\n      this.getId();\n      console.log(this.currentUserId);\n      this.chatRooms = this.api.collectionDataQuery('chatRooms', this.api.whereQuery('members', 'array-contains', this.currentUserId)).pipe(map(data => {\n        console.log('room data: ', data);\n        data.map(element => {\n          const user_data = element.members.filter(x => x != this.currentUserId);\n          console.log(user_data);\n          const user = this.api.docDataQuery(`users/${user_data[0]}`, true);\n          // const user: any = this.api.getDocById(`users/${user_data[0]}`);\n          element.user = user;\n        });\n        return data;\n      }), switchMap(data => {\n        return of(data);\n      }));\n    }\n    getChatRoomMessages(chatRoomId) {\n      this.selectedChatRoomMessages = this.api.collectionDataQuery(`chats/${chatRoomId}/messages`, this.api.orderByQuery('createdAt', 'desc')).pipe(map(arr => arr.reverse()));\n    }\n    sendMessage(chatId, msg) {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        try {\n          const new_message = {\n            message: msg,\n            sender: _this2.currentUserId,\n            createdAt: new Date()\n          };\n          console.log(chatId);\n          if (chatId) {\n            yield _this2.api.addDocument(`chats/${chatId}/messages`, new_message);\n          }\n        } catch (e) {\n          throw e;\n        }\n      })();\n    }\n  }\n  _class = ChatService;\n  _class.ɵfac = function ChatService_Factory(t) {\n    return new (t || _class)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.ApiService));\n  };\n  _class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: _class,\n    factory: _class.ɵfac,\n    providedIn: 'root'\n  });\n  return ChatService;\n})();\nexport { ChatService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}