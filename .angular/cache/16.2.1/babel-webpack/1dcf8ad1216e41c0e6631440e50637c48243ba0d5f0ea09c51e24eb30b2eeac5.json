{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/rubva/Desktop/chat+app+source+code/chat app source code/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport { map, of, switchMap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./../auth/auth.service\";\nimport * as i2 from \"../api/api.service\";\nclass ChatService {\n  constructor(auth, api) {\n    this.auth = auth;\n    this.api = api;\n    // this.getId();\n  }\n\n  getId() {\n    console.log(this.currentUserId);\n    this.currentUserId = this.auth.getId();\n  }\n  getUsers() {\n    this.users = this.api.collectionDataQuery('users', this.api.whereQuery('uid', '!=', this.currentUserId));\n  }\n  createChatRoom(user_id) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      try {\n        // check for existing chatroom\n        let room;\n        const querySnapshot = yield _this.api.getDocs('chatRooms', _this.api.whereQuery('members', 'in', [[user_id, _this.currentUserId], [_this.currentUserId, user_id]]));\n        room = yield querySnapshot.docs.map(doc => {\n          let item = doc.data();\n          item.id = doc.id;\n          return item;\n        });\n        console.log('exist docs: ', room);\n        if (room?.length > 0) return room[0];\n        const data = {\n          members: [_this.currentUserId, user_id],\n          type: 'private',\n          createdAt: new Date(),\n          updatedAt: new Date()\n        };\n        room = yield _this.api.addDocument('chatRooms', data);\n        return room;\n      } catch (e) {\n        throw e;\n      }\n    })();\n  }\n  getChatRooms() {\n    this.getId();\n    console.log(this.currentUserId);\n    this.chatRooms = this.api.collectionDataQuery('chatRooms', this.api.whereQuery('members', 'array-contains', this.currentUserId)).pipe(map(data => {\n      console.log('room data: ', data);\n      data.map(element => {\n        const user_data = element.members.filter(x => x != this.currentUserId);\n        console.log(user_data);\n        const user = this.api.docDataQuery(`users/${user_data[0]}`, true);\n        // const user: any = this.api.getDocById(`users/${user_data[0]}`);\n        element.user = user;\n      });\n      return data;\n    }), switchMap(data => {\n      return of(data);\n    }));\n  }\n  getChatRoomMessages(chatRoomId) {\n    this.selectedChatRoomMessages = this.api.collectionDataQuery(`chats/${chatRoomId}/messages`, this.api.orderByQuery('createdAt', 'desc')).pipe(map(arr => arr.reverse()));\n  }\n  sendMessage(chatId, msg) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const new_message = {\n          message: msg,\n          sender: _this2.currentUserId,\n          createdAt: new Date()\n        };\n        console.log(chatId);\n        if (chatId) {\n          yield _this2.api.addDocument(`chats/${chatId}/messages`, new_message);\n        }\n      } catch (e) {\n        throw e;\n      }\n    })();\n  }\n}\n_class = ChatService;\n_class.ɵfac = function ChatService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.ApiService));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport { ChatService };","map":{"version":3,"names":["map","of","switchMap","ChatService","constructor","auth","api","getId","console","log","currentUserId","getUsers","users","collectionDataQuery","whereQuery","createChatRoom","user_id","_this","_asyncToGenerator","room","querySnapshot","getDocs","docs","doc","item","data","id","length","members","type","createdAt","Date","updatedAt","addDocument","e","getChatRooms","chatRooms","pipe","element","user_data","filter","x","user","docDataQuery","getChatRoomMessages","chatRoomId","selectedChatRoomMessages","orderByQuery","arr","reverse","sendMessage","chatId","msg","_this2","new_message","message","sender","i0","ɵɵinject","i1","AuthService","i2","ApiService","factory","ɵfac","providedIn"],"sources":["C:\\Users\\rubva\\Desktop\\chat+app+source+code\\chat app source code\\src\\app\\services\\chat\\chat.service.ts"],"sourcesContent":["import { AuthService } from './../auth/auth.service';\nimport { Injectable } from '@angular/core';\nimport { map, Observable, of, switchMap } from 'rxjs';\nimport { ApiService } from '../api/api.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ChatService {\n  \n  currentUserId: string;\n  public users: Observable<any>;\n  public chatRooms: Observable<any>;\n  public selectedChatRoomMessages: Observable<any>;\n\n  constructor(\n    public auth: AuthService, \n    private api: ApiService\n  ) { \n    // this.getId();\n  }\n\n  getId() {\n    console.log(this.currentUserId);\n    this.currentUserId = this.auth.getId();\n  }\n\n  getUsers() {\n    this.users = this.api.collectionDataQuery(\n      'users', \n      this.api.whereQuery('uid', '!=', this.currentUserId)\n    );\n  }\n\n  async createChatRoom(user_id) {\n    try {\n      // check for existing chatroom\n      let room: any;\n      const querySnapshot = await this.api.getDocs(\n        'chatRooms',\n        this.api.whereQuery(\n          'members', \n          'in', \n          [[user_id, this.currentUserId], [this.currentUserId, user_id]]\n        )\n      );\n      room = await querySnapshot.docs.map((doc: any) => {\n        let item = doc.data();\n        item.id = doc.id;\n        return item;\n      });\n      console.log('exist docs: ', room);\n      if(room?.length > 0) return room[0];\n      const data = {\n        members: [\n          this.currentUserId,\n          user_id\n        ],\n        type: 'private',\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n      room = await this.api.addDocument('chatRooms', data);\n      return room;\n    } catch(e) {\n      throw(e);\n    }\n  }\n\n  getChatRooms() {\n    this.getId();\n    console.log(this.currentUserId);\n    this.chatRooms = this.api.collectionDataQuery(\n      'chatRooms', \n      this.api.whereQuery('members', 'array-contains', this.currentUserId)\n    ).pipe(\n      map((data: any[]) => {\n        console.log('room data: ', data);\n        data.map((element) => {\n          const user_data = element.members.filter(x => x != this.currentUserId);\n          console.log(user_data);\n          const user = this.api.docDataQuery(`users/${user_data[0]}`, true);\n          // const user: any = this.api.getDocById(`users/${user_data[0]}`);\n          element.user = user;\n        });\n        return (data);\n      }),\n      switchMap(data => {\n        return of(data);\n      })\n    );\n  }\n\n  getChatRoomMessages(chatRoomId) {\n    this.selectedChatRoomMessages = this.api.collectionDataQuery(\n      `chats/${chatRoomId}/messages`, \n      this.api.orderByQuery('createdAt', 'desc')\n    )\n    .pipe(map((arr: any) => arr.reverse()));\n  }\n\n  async sendMessage(chatId, msg) {\n    try {\n      const new_message = {\n        message: msg,\n        sender: this.currentUserId,\n        createdAt: new Date()\n      };\n      console.log(chatId);\n      if(chatId) {\n        await this.api.addDocument(`chats/${chatId}/messages`, new_message);\n      }\n    } catch(e) {\n      throw(e);\n    }\n  }\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}