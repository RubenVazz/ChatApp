{"ast":null,"code":"import { addDoc, collection, collectionData, doc, docData, getDoc, getDocs, orderBy, query, setDoc, where } from '@angular/fire/firestore';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/firestore\";\nlet ApiService = /*#__PURE__*/(() => {\n  var _class;\n  class ApiService {\n    constructor(firestore) {\n      this.firestore = firestore;\n    }\n    docRef(path) {\n      return doc(this.firestore, path);\n    }\n    collectionRef(path) {\n      return collection(this.firestore, path);\n    }\n    setDocument(path, data) {\n      const dataRef = this.docRef(path);\n      return setDoc(dataRef, data); //set()\n    }\n\n    addDocument(path, data) {\n      const dataRef = this.collectionRef(path);\n      return addDoc(dataRef, data); //add()\n    }\n\n    getDocById(path) {\n      const dataRef = this.docRef(path);\n      return getDoc(dataRef);\n    }\n    getDocs(path, queryFn) {\n      let dataRef = this.collectionRef(path);\n      if (queryFn) {\n        const q = query(dataRef, queryFn);\n        dataRef = q;\n      }\n      return getDocs(dataRef); //get()\n    }\n\n    collectionDataQuery(path, queryFn) {\n      let dataRef = this.collectionRef(path);\n      if (queryFn) {\n        const q = query(dataRef, queryFn);\n        dataRef = q;\n      }\n      const collection_data = collectionData(dataRef, {\n        idField: 'id'\n      }); // valuechanges, for doc use docData\n      return collection_data;\n    }\n    docDataQuery(path, id, queryFn) {\n      let dataRef = this.docRef(path);\n      if (queryFn) {\n        const q = query(dataRef, queryFn);\n        dataRef = q;\n      }\n      let doc_data;\n      if (id) doc_data = docData(dataRef, {\n        idField: 'id'\n      });else doc_data = docData(dataRef); // valuechanges, for doc use docData\n      return doc_data;\n    }\n    whereQuery(fieldPath, condition, value) {\n      return where(fieldPath, condition, value);\n    }\n    orderByQuery(fieldPath, directionStr = 'asc') {\n      return orderBy(fieldPath, directionStr);\n    }\n  }\n  _class = ApiService;\n  _class.ɵfac = function ApiService_Factory(t) {\n    return new (t || _class)(i0.ɵɵinject(i1.Firestore));\n  };\n  _class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: _class,\n    factory: _class.ɵfac,\n    providedIn: 'root'\n  });\n  return ApiService;\n})();\nexport { ApiService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}