{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/rubva/Desktop/chat+app+source+code/chat app source code/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/auth/auth.service\";\nimport * as i2 from \"@angular/router\";\nclass AuthGuard {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  canLoad() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const user = yield _this.authService.checkAuth();\n        // const uid = this.authService.getId();\n        console.log(user);\n        if (user) {\n          return true;\n        } else {\n          _this.navigate('/login');\n          return false;\n        }\n      } catch (e) {\n        console.log(e);\n        _this.navigate('/login');\n        return false;\n      }\n    })();\n  }\n  navigate(url) {\n    this.router.navigateByUrl(url, {\n      replaceUrl: true\n    });\n  }\n}\n_class = AuthGuard;\n_class.ɵfac = function AuthGuard_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport { AuthGuard };","map":{"version":3,"names":["AuthGuard","constructor","authService","router","canLoad","_this","_asyncToGenerator","user","checkAuth","console","log","navigate","e","url","navigateByUrl","replaceUrl","i0","ɵɵinject","i1","AuthService","i2","Router","factory","ɵfac","providedIn"],"sources":["C:\\Users\\rubva\\Desktop\\chat+app+source+code\\chat app source code\\src\\app\\guards\\auth\\auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { CanLoad, Router } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth/auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanLoad {\n\n  constructor(\n    private authService: AuthService, \n    private router: Router) {}\n\n  async canLoad(): Promise<boolean> {\n      try {\n        const user = await this.authService.checkAuth();\n        // const uid = this.authService.getId();\n        console.log(user);\n        if(user) {\n          return true;\n        } else {\n          this.navigate('/login');\n          return false;\n        }\n      } catch(e) {\n        console.log(e);\n        this.navigate('/login');\n        return false;\n      }\n  }\n\n  navigate(url: any) {\n    this.router.navigateByUrl(url, {replaceUrl: true});\n  }\n}\n"],"mappings":";;;;;AAIA,MAGaA,SAAS;EAEpBC,YACUC,WAAwB,EACxBC,MAAc;IADd,KAAAD,WAAW,GAAXA,WAAW;IACX,KAAAC,MAAM,GAANA,MAAM;EAAW;EAErBC,OAAOA,CAAA;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA;MACT,IAAI;QACF,MAAMC,IAAI,SAASF,KAAI,CAACH,WAAW,CAACM,SAAS,EAAE;QAC/C;QACAC,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC;QACjB,IAAGA,IAAI,EAAE;UACP,OAAO,IAAI;SACZ,MAAM;UACLF,KAAI,CAACM,QAAQ,CAAC,QAAQ,CAAC;UACvB,OAAO,KAAK;;OAEf,CAAC,OAAMC,CAAC,EAAE;QACTH,OAAO,CAACC,GAAG,CAACE,CAAC,CAAC;QACdP,KAAI,CAACM,QAAQ,CAAC,QAAQ,CAAC;QACvB,OAAO,KAAK;;IACb;EACL;EAEAA,QAAQA,CAACE,GAAQ;IACf,IAAI,CAACV,MAAM,CAACW,aAAa,CAACD,GAAG,EAAE;MAACE,UAAU,EAAE;IAAI,CAAC,CAAC;EACpD;;SA1BWf,SAAS;;mBAATA,MAAS,EAAAgB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;AAAA;;SAATrB,MAAS;EAAAsB,OAAA,EAATtB,MAAS,CAAAuB,IAAA;EAAAC,UAAA,EAFR;AAAM;SAEPxB,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}