{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/rubva/Desktop/chat+app+source+code/chat app source code/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { createUserWithEmailAndPassword, getAuth, onAuthStateChanged, sendPasswordResetEmail, signInWithEmailAndPassword } from '@angular/fire/auth';\nimport { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/auth\";\nimport * as i2 from \"./../api/api.service\";\nlet AuthService = /*#__PURE__*/(() => {\n  var _class;\n  class AuthService {\n    constructor(fireAuth, apiService) {\n      this.fireAuth = fireAuth;\n      this.apiService = apiService;\n      this._uid = new BehaviorSubject(null);\n    }\n    login(email, password) {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        try {\n          console.log(email);\n          const response = yield signInWithEmailAndPassword(_this.fireAuth, email, password);\n          console.log(response);\n          if (response?.user) {\n            _this.setUserData(response.user.uid);\n          }\n        } catch (e) {\n          console.log(e);\n          throw e;\n        }\n      })();\n    }\n    getId() {\n      const auth = getAuth();\n      console.log('current user auth: ', auth.currentUser);\n      this.currentUser = auth.currentUser;\n      console.log(this.currentUser);\n      return this.currentUser?.uid;\n    }\n    setUserData(uid) {\n      this._uid.next(uid);\n    }\n    randomIntFromInterval(min, max) {\n      return Math.floor(Math.random() * (max - min + 1) + min);\n    }\n    register(formValue) {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        try {\n          const registeredUser = yield createUserWithEmailAndPassword(_this2.fireAuth, formValue.email, formValue.password);\n          console.log('registered user: ', registeredUser);\n          const data = {\n            email: formValue.email,\n            name: formValue.username,\n            uid: registeredUser.user.uid,\n            photo: 'https://i.pravatar.cc/' + _this2.randomIntFromInterval(200, 400)\n          };\n          yield _this2.apiService.setDocument(`users/${registeredUser.user.uid}`, data);\n          const userData = {\n            id: registeredUser.user.uid\n          };\n          return userData;\n        } catch (e) {\n          throw e;\n        }\n      })();\n    }\n    resetPassword(email) {\n      var _this3 = this;\n      return _asyncToGenerator(function* () {\n        try {\n          yield sendPasswordResetEmail(_this3.fireAuth, email);\n        } catch (e) {\n          throw e;\n        }\n      })();\n    }\n    logout() {\n      var _this4 = this;\n      return _asyncToGenerator(function* () {\n        try {\n          yield _this4.fireAuth.signOut();\n          _this4._uid.next(null);\n          _this4.currentUser = null;\n          return true;\n        } catch (e) {\n          throw e;\n        }\n      })();\n    }\n    checkAuth() {\n      return new Promise((resolve, reject) => {\n        onAuthStateChanged(this.fireAuth, user => {\n          console.log('auth user: ', user);\n          resolve(user);\n        });\n      });\n    }\n    getUserData(id) {\n      var _this5 = this;\n      return _asyncToGenerator(function* () {\n        const docSnap = yield _this5.apiService.getDocById(`users/${id}`);\n        if (docSnap?.exists()) {\n          return docSnap.data();\n        } else {\n          throw 'No such document exists';\n        }\n      })();\n    }\n  }\n  _class = AuthService;\n  _class.ɵfac = function AuthService_Factory(t) {\n    return new (t || _class)(i0.ɵɵinject(i1.Auth), i0.ɵɵinject(i2.ApiService));\n  };\n  _class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: _class,\n    factory: _class.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();\nexport { AuthService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}