{"ast":null,"code":"var _class;\nimport { addDoc, collection, collectionData, doc, docData, getDoc, getDocs, orderBy, query, setDoc, where } from '@angular/fire/firestore';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/firestore\";\nclass ApiService {\n  constructor(firestore) {\n    this.firestore = firestore;\n  }\n  docRef(path) {\n    return doc(this.firestore, path);\n  }\n  collectionRef(path) {\n    return collection(this.firestore, path);\n  }\n  setDocument(path, data) {\n    const dataRef = this.docRef(path);\n    return setDoc(dataRef, data); //set()\n  }\n\n  addDocument(path, data) {\n    const dataRef = this.collectionRef(path);\n    return addDoc(dataRef, data); //add()\n  }\n\n  getDocById(path) {\n    const dataRef = this.docRef(path);\n    return getDoc(dataRef);\n  }\n  getDocs(path, queryFn) {\n    let dataRef = this.collectionRef(path);\n    if (queryFn) {\n      const q = query(dataRef, queryFn);\n      dataRef = q;\n    }\n    return getDocs(dataRef); //get()\n  }\n\n  collectionDataQuery(path, queryFn) {\n    let dataRef = this.collectionRef(path);\n    if (queryFn) {\n      const q = query(dataRef, queryFn);\n      dataRef = q;\n    }\n    const collection_data = collectionData(dataRef, {\n      idField: 'id'\n    }); // valuechanges, for doc use docData\n    return collection_data;\n  }\n  docDataQuery(path, id, queryFn) {\n    let dataRef = this.docRef(path);\n    if (queryFn) {\n      const q = query(dataRef, queryFn);\n      dataRef = q;\n    }\n    let doc_data;\n    if (id) doc_data = docData(dataRef, {\n      idField: 'id'\n    });else doc_data = docData(dataRef); // valuechanges, for doc use docData\n    return doc_data;\n  }\n  whereQuery(fieldPath, condition, value) {\n    return where(fieldPath, condition, value);\n  }\n  orderByQuery(fieldPath, directionStr = 'asc') {\n    return orderBy(fieldPath, directionStr);\n  }\n}\n_class = ApiService;\n_class.ɵfac = function ApiService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.Firestore));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport { ApiService };","map":{"version":3,"names":["addDoc","collection","collectionData","doc","docData","getDoc","getDocs","orderBy","query","setDoc","where","ApiService","constructor","firestore","docRef","path","collectionRef","setDocument","data","dataRef","addDocument","getDocById","queryFn","q","collectionDataQuery","collection_data","idField","docDataQuery","id","doc_data","whereQuery","fieldPath","condition","value","orderByQuery","directionStr","i0","ɵɵinject","i1","Firestore","factory","ɵfac","providedIn"],"sources":["C:\\Users\\rubva\\Desktop\\chat+app+source+code\\chat app source code\\src\\app\\services\\api\\api.service.ts"],"sourcesContent":["import { addDoc, collection, collectionData, doc, docData, Firestore, getDoc, getDocs, orderBy, OrderByDirection, query, setDoc, where } from '@angular/fire/firestore';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApiService {\n\n  constructor(private firestore: Firestore) { }\n\n  docRef(path) {\n    return doc(this.firestore, path);\n  }\n\n  collectionRef(path) {\n    return collection(this.firestore, path);\n  }\n\n  setDocument(path, data) {\n    const dataRef = this.docRef(path);\n    return setDoc<any>(dataRef, data); //set()\n  }\n\n  addDocument(path, data) {\n    const dataRef = this.collectionRef(path);\n    return addDoc<any>(dataRef, data); //add()\n  }\n\n  getDocById(path) {\n    const dataRef = this.docRef(path);\n    return getDoc(dataRef);\n  }\n\n  getDocs(path, queryFn?) {\n    let dataRef: any = this.collectionRef(path);\n    if(queryFn) {\n      const q = query(dataRef, queryFn);\n      dataRef = q;\n    }\n    return getDocs<any>(dataRef); //get()\n  }\n\n  collectionDataQuery(path, queryFn?) {\n    let dataRef: any = this.collectionRef(path);\n    if(queryFn) {\n      const q = query(dataRef, queryFn);\n      dataRef = q;\n    }\n    const collection_data = collectionData<any>(dataRef, {idField: 'id'}); // valuechanges, for doc use docData\n    return collection_data;\n  }\n\n  docDataQuery(path, id?, queryFn?) {\n    let dataRef: any = this.docRef(path);\n    if(queryFn) {\n      const q = query(dataRef, queryFn);\n      dataRef = q;\n    }\n    let doc_data;\n    if(id) doc_data = docData<any>(dataRef, {idField: 'id'});\n    else doc_data = docData<any>(dataRef); // valuechanges, for doc use docData\n    return doc_data;\n  }\n\n  whereQuery(fieldPath, condition, value) {\n    return where(fieldPath, condition, value);\n  }\n\n  orderByQuery(fieldPath, directionStr: OrderByDirection = 'asc') {\n    return orderBy(fieldPath, directionStr);\n  }\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}